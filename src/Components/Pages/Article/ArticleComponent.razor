@using Markdig
@using RealworldBlazorHtmx.App.ServiceClient
@inherits BaseComponent<ArticleComponent.Input>
<div class="article-page" id="articlepage">
    <div class="banner">
        <div class="container">
            <h1>@Data.Article.Title</h1>

            <div class="article-meta">
                <a href="/profile/?author=@Data.Article.Author.Username">
                    <img src="@Data.Article.Author.Image" />
                </a>
                <div class="info">
                    <a href="/profile/?author=@Data.Article.Author.Username"
                        class="author">@Data.Article.Author.Username</a>
                    <span class="date">@Data.Article.UpdatedAt.ToString("MMMM d, yyyy")</span>
                </div>
                @if (Data.User is not null && Data.User.Username == Data.Article.Author.Username)
                {
                    <a href="/editor/@Data.Article.Slug">
                        <button class="btn btn-sm btn-outline-secondary">
                            <i class="ion-edit"></i> Edit Article
                        </button>
                    </a>
                    <button class="btn btn-sm btn-outline-danger" hx-delete="/article/@Data.Article.Slug">
                        <i class="ion-trash-a"></i> Delete Article
                    </button>

                }
                else
                {
                    <ArticleAuthorComponent Data="@(new ArticleAuthorComponent.Input(Data.Article.Author))">
                    </ArticleAuthorComponent>

                    @if (Data.Article.Favorited)
                    {
                        <button class="btn btn-sm btn-primary" hx-delete="/article/@Data.Article.Slug/favorite"
                            hx-target="#articlepage">
                            <i class="ion-heart"></i>
                            Unfavorite Article <span class="counter">(@Data.Article.FavoritesCount)</span>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-outline-primary" hx-post="/article/@Data.Article.Slug/favorite"
                            hx-target="#articlepage">
                            <i class="ion-heart"></i>
                            Favorite Article <span class="counter">(@Data.Article.FavoritesCount)</span>
                        </button>
                    }


                }

            </div>
        </div>
    </div>

    <div class="container page">
        <div class="row article-content">
            <div class="col-md-12">
                @((MarkupString)GetHtml(Data.Article.Description))
                @((MarkupString)GetHtml(Data.Article.Body))
                <ul class="tag-list">
                    @foreach (var tag in Data.Article.TagList)
                    {
                        <li class="tag-default tag-pill tag-outline">@tag</li>
                    }
                </ul>
            </div>
        </div>

        <hr />
        @if (Data is { IsAuthenticated: true, User: not null })
        {
            <div class="col-xs-12 col-md-8 offset-md-2">
                <div hx-get="/article/@Data.Article.Slug/comments" hx-trigger="load" id="commentlist"></div>
            </div>
        }

    </div>
</div>

@code {

    public record Input(bool IsAuthenticated, ServiceClient.Article Article, User? User);

    private static string GetHtml(string markdown)
    {
        var pipeline = new MarkdownPipelineBuilder()
        .UseSoftlineBreakAsHardlineBreak()
        .Build();
        return Markdown.ToHtml(markdown, pipeline);
    }

}